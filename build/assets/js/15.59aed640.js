(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{369:function(t,s,a){"use strict";a.r(s);var e=a(45),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"zilliqa-api-utils"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zilliqa-api-utils"}},[t._v("#")]),t._v(' Zilliqa API "utils".')]),t._v(" "),a("p",[t._v("This API is needed to verify and normalize the address, this API may be expanded in the future.")]),t._v(" "),a("h2",{attrs:{id:"window-zilpay-utils"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-zilpay-utils"}},[t._v("#")]),t._v(" "),a("code",[t._v("window.zilPay.utils")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("BN")])])]),t._v(" "),a("p",[t._v("See documentation at "),a("a",{attrs:{href:"https://github.com/indutny/bn.js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("bn.js"),a("OutboundLink")],1),t._v(" for more information.")]),t._v(" "),a("p",[t._v("for example:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" amount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("units"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toQa")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("units"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Units"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Zil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10 zil")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" gasPrice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("units"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toQa")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1000'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("units"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Units"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Li"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("Long")])])]),t._v(" "),a("p",[t._v("See documentation at "),a("a",{attrs:{href:"https://github.com/dcodeIO/long.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("long.js"),a("OutboundLink")],1),t._v(". Note that long is only required if you need to serialise integers with size greater than or equal to 2^53.")]),t._v(" "),a("p",[t._v("for example:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" gasLimit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Long"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"units"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#units"}},[t._v("#")]),t._v(" "),a("code",[t._v("units")])]),t._v(" "),a("p",[a("code",[t._v("fromQa(qa: BN, unit: Units, options: Options)")])]),t._v(" "),a("p",[t._v("Converts from "),a("code",[t._v("qa")]),t._v(" (smallest unit) to "),a("code",[t._v("zil")]),t._v(" or "),a("code",[t._v("li")]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("Parameters")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("qa")]),t._v(": "),a("code",[t._v("BN")]),t._v(" - the value to convert from.")]),t._v(" "),a("li",[a("code",[t._v("unit")]),t._v(": "),a("code",[t._v("Units")]),t._v(" - the unit to be converted to ("),a("code",[t._v("'zil' | 'qa'")]),t._v(").")]),t._v(" "),a("li",[a("code",[t._v("options")]),t._v(": "),a("code",[t._v("Options")]),t._v(" - an object specifying options.")])]),t._v(" "),a("p",[a("code",[t._v("toQa(input: string | number | BN, unit: Units)")])]),t._v(" "),a("p",[t._v("Converts "),a("code",[t._v("zil")]),t._v(" or "),a("code",[t._v("li")]),t._v(" to "),a("code",[t._v("qa")]),t._v(" (smallest unit).")]),t._v(" "),a("p",[a("strong",[t._v("Parameters")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("input")]),t._v(": "),a("code",[t._v("string | number | BN")]),t._v(" - the value to convert from.")]),t._v(" "),a("li",[a("code",[t._v("unit")]),t._v(": "),a("code",[t._v("Units")]),t._v(" - the unit to be converted "),a("em",[t._v("from")]),t._v(" ("),a("code",[t._v("'zil' | 'li'")]),t._v(").")])]),t._v(" "),a("h3",{attrs:{id:"validation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#validation"}},[t._v("#")]),t._v(" "),a("code",[t._v("validation")])]),t._v(" "),a("p",[a("code",[t._v("isString(x: unknown): boolean")])]),t._v(" "),a("p",[t._v("Determines if a given value is a valid JS "),a("code",[t._v("string")]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("Parameters")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("x")]),t._v(": "),a("code",[t._v("unknown")])])]),t._v(" "),a("p",[a("strong",[t._v("Returns")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("boolean")]),t._v(" - "),a("code",[t._v("true")]),t._v(" if the value is a "),a("code",[t._v("string")]),t._v(".")])]),t._v(" "),a("p",[a("code",[t._v("isBN(x: unknown): boolean")])]),t._v(" "),a("p",[t._v("Determines if a given value is an instance of "),a("code",[t._v("BN.js")]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("Parameters")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("x")]),t._v(": "),a("code",[t._v("unknown")])])]),t._v(" "),a("p",[a("strong",[t._v("Returns")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("boolean")]),t._v(" - "),a("code",[t._v("true")]),t._v(" if the value is a "),a("code",[t._v("BN")]),t._v(" instance.")])]),t._v(" "),a("p",[a("code",[t._v("isNumber(x: unknown): boolean")])]),t._v(" "),a("p",[t._v("Determines if a given value is a valid JS "),a("code",[t._v("number")]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("Parameters")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("x")]),t._v(": "),a("code",[t._v("unknown")])])]),t._v(" "),a("p",[a("strong",[t._v("Returns")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("boolean")]),t._v(" - "),a("code",[t._v("true")]),t._v(" if the string is a valid signature.")])]),t._v(" "),a("p",[a("code",[t._v("isSignature(sig: string): boolean")])]),t._v(" "),a("p",[t._v("Determines if a given string is a valid Schnorr signature.")]),t._v(" "),a("p",[a("strong",[t._v("Parameters")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("sig")]),t._v(": "),a("code",[t._v("string")])])]),t._v(" "),a("p",[a("strong",[t._v("Returns")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("boolean")]),t._v(" - "),a("code",[t._v("true")]),t._v(" if the string is a valid signature.")])]),t._v(" "),a("p",[a("code",[t._v("isPubKey(pubKey: string): boolean")])]),t._v(" "),a("p",[t._v("Determines if a given string is a valid "),a("em",[t._v("uncompressed")]),t._v(" public key.")]),t._v(" "),a("p",[a("strong",[t._v("Parameters")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("pubKey")]),t._v(": "),a("code",[t._v("string")]),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("Returns")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("boolean")]),t._v(" - "),a("code",[t._v("true")]),t._v(" if the string is a valid public key.")])]),t._v(" "),a("p",[a("code",[t._v("isBech32(address: string): boolean")])]),t._v(" "),a("p",[t._v("Determines if a given string is a valid Zilliqa bech32 address.")]),t._v(" "),a("p",[a("strong",[t._v("Parameters")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("address")]),t._v(": "),a("code",[t._v("string")]),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("Returns")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("boolean")]),t._v(" - "),a("code",[t._v("true")]),t._v(" if the string is a valid Zilliqa bech32 address.")])]),t._v(" "),a("p",[a("code",[t._v("isAddress(address: string): boolean")])]),t._v(" "),a("p",[t._v("Determines if a given string is a valid address.")]),t._v(" "),a("p",[a("strong",[t._v("Parameters")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("address")]),t._v(": "),a("code",[t._v("string")]),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("Returns")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("boolean")]),t._v(" - "),a("code",[t._v("true")]),t._v(" if the string is an address.")])]),t._v(" "),a("p",[a("strong",[t._v("Parameters")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("address")]),t._v(": "),a("code",[t._v("string")]),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("Returns")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("boolean")]),t._v(" - "),a("code",[t._v("true")]),t._v(" if the string is an address.")])]),t._v(" "),a("p",[a("code",[t._v("isBech32(address: string): boolean")])]),t._v(" "),a("p",[t._v("Determines if a given string is a valid address in Bech32 format.")]),t._v(" "),a("p",[a("strong",[t._v("Parameters")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("address")]),t._v(": "),a("code",[t._v("string")]),t._v(".")])]),t._v(" "),a("p",[a("strong",[t._v("Returns")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("boolean")]),t._v(" - "),a("code",[t._v("true")]),t._v(" if the string is an address.")])]),t._v(" "),a("h2",{attrs:{id:"window-zilpay-typechecker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-zilpay-typechecker"}},[t._v("#")]),t._v(" "),a("code",[t._v("window.zilPay.TypeChecker")])]),t._v(" "),a("p",[t._v("This API can check types.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" testForArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zilPay"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TypeChecker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntestForArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isArray "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" testForArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zilPay"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TypeChecker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntestForArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isArray "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\ntestForArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isBoolean "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\ntestForArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isFloat "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\ntestForArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isFunction "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\ntestForArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isInt "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\ntestForArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isObject "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\ntestForArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isString "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\ntestForArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isSymbol "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\ntestForArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isUndefined "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);