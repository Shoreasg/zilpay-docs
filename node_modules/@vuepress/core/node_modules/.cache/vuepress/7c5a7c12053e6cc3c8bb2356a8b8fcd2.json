{"remainingRequest":"/Users/rinat/projects/zilpay/zilpay-docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/rinat/projects/zilpay/zilpay-docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/rinat/projects/zilpay/zilpay-docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/rinat/projects/zilpay/zilpay-docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/rinat/projects/zilpay/zilpay-docs/docs/initializing-dapps/README.md?vue&type=template&id=44e5847c&","dependencies":[{"path":"/Users/rinat/projects/zilpay/zilpay-docs/docs/initializing-dapps/README.md","mtime":1617431777269},{"path":"/Users/rinat/projects/zilpay/zilpay-docs/node_modules/cache-loader/dist/cjs.js","mtime":1614854378606},{"path":"/Users/rinat/projects/zilpay/zilpay-docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1614854511094},{"path":"/Users/rinat/projects/zilpay/zilpay-docs/node_modules/cache-loader/dist/cjs.js","mtime":1614854378606},{"path":"/Users/rinat/projects/zilpay/zilpay-docs/node_modules/vue-loader/lib/index.js","mtime":1614854511094},{"path":"/Users/rinat/projects/zilpay/zilpay-docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1614854512435}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJpbml0aWFsaXppbmctZGFwcHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2luaXRpYWxpemluZy1kYXBwcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEluaXRpYWxpemluZyBEYXBwcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJPbmNlIHlvdSBoYXZlIHlvdXIgYmFzaWMgZGV2IGVudmlyb25tZW50ICIpLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiLi9nZXQtc3RhcnRlZCIgfSB9LCBbX3ZtLl92KCJzZXQgdXAiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIsIHlvdSBhcmUgcmVhZHkgdG8gc3RhcnQgaW50ZXJhY3Rpbmcgd2l0aCBzb21lIHNtYXJ0IGNvbnRyYWN0cy4gVGhlcmUgYXJlIHNvbWUgYmFzaWMgdGhpbmdzIHlvdSdsbCBuZWVkIHJlZ2FyZGxlc3Mgb2Ygd2hhdCBjb252ZW5pZW5jZSBsaWJyYXJ5IHlvdSdyZSB1c2luZywgd2hlbiBjb21tdW5pY2F0aW5nIHdpdGggYSBzbWFydCBjb250cmFjdDoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ0aGUtY29udHJhY3QtbmV0d29yayIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdGhlLWNvbnRyYWN0LW5ldHdvcmsiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBUaGUgQ29udHJhY3QgTmV0d29yayIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIHlvdSBhcmVuJ3QgY29ubmVjdGVkIHRvIHRoZSByaWdodCBuZXR3b3JrLCB5b3UgYXJlbid0IGdvaW5nIHRvIGhhdmUgYW55IGx1Y2sgc2VuZGluZyB0cmFuc2FjdGlvbnMgdG8geW91ciBjb250cmFjdCwgc28gbWFrZSBzdXJlIHlvdSBoYXZlIHRoaXMgcmlnaHQhIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnTWFueSBjbGV2ZXIgZGFwcHMgd2lsbCByZWNvZ25pemUgdGhlIHVzZXJcJ3MgY3VycmVudCBuZXR3b3JrLCBhbmQgYWN0dWFsbHkgYWRhcHQgdG8gaXQhIEZvciBleGFtcGxlLCBpZiB5b3UgZGV0ZWN0IGEgdGVzdCBuZXR3b3JrLCB5b3UgY291bGQgZGVsaWJlcmF0ZWx5IGNvbm5lY3QgdG8gYSB0ZXN0LW5ldHdvcmsgdmVyc2lvbiBvZiB5b3VyIHNtYXJ0IGNvbnRyYWN0LCB3aGljaCBtYWtlcyBpdCBlYXN5IGZvciB1c2VycyB0byAidHJ5IG91dCIgeW91ciBzeXN0ZW0gd2l0aG91dCB1c2luZyByZWFsIG1vbmV5IScKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInRoZS1jb250cmFjdC1hZGRyZXNzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN0aGUtY29udHJhY3QtYWRkcmVzcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFRoZSBDb250cmFjdCBBZGRyZXNzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRXZlcnkgYWNjb3VudCBpbiBaaWxsaXFhIGhhcyBhbiBhZGRyZXNzLCB3aGV0aGVyIGl04oCZcyBhbiBleHRlcm5hbCBrZXktcGFpciBhY2NvdW50LCBvciBhIHNtYXJ0IGNvbnRyYWN0LiBJbiBvcmRlciBmb3IgYW55IHNtYXJ0IGNvbnRyYWN0IGxpYnJhcnkgdG8gY29tbXVuaWNhdGUgd2l0aCB5b3VyIGNvbnRyYWN0cywgdGhleeKAmWxsIG5lZWQgdG8ga25vdyBpdHMgZXhhY3QgYWRkcmVzcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJzY2lsbGEtYS1zbWFydC1jb250cmFjdC1pbnRlcm1lZGlhdGUtbGV2ZWwtbGFuZ3VhZ2UiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI3NjaWxsYS1hLXNtYXJ0LWNvbnRyYWN0LWludGVybWVkaWF0ZS1sZXZlbC1sYW5ndWFnZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBTY2lsbGE6IEEgU21hcnQgQ29udHJhY3QgSW50ZXJtZWRpYXRlIExldmVsIExhbmd1YWdlIikKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU2NpbGxhIHNob3J0IGZvciBTbWFydCBDb250cmFjdCBJbnRlcm1lZGlhdGUtTGV2ZWwgTEFuZ3VhZ2UgaXMgYW4gaW50ZXJtZWRpYXRlLWxldmVsIHNtYXJ0IGNvbnRyYWN0IGxhbmd1YWdlIGJlaW5nIGRldmVsb3BlZCBmb3IgWmlsbGlxYS4gU2NpbGxhIGhhcyBiZWVuIGRlc2lnbmVkIGFzIGEgcHJpbmNpcGxlZCBsYW5ndWFnZSB3aXRoIHNtYXJ0IGNvbnRyYWN0IHNhZmV0eSBpbiBtaW5kLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNjaWxsYSBpbXBvc2VzIGEgc3RydWN0dXJlIG9uIHNtYXJ0IGNvbnRyYWN0cyB0aGF0IHdpbGwgbWFrZSBhcHBsaWNhdGlvbnMgbGVzcyB2dWxuZXJhYmxlIHRvIGF0dGFja3MgYnkgZWxpbWluYXRpbmcgY2VydGFpbiBrbm93biB2dWxuZXJhYmlsaXRpZXMgZGlyZWN0bHkgYXQgdGhlIGxhbmd1YWdlLWxldmVsLiBGdXJ0aGVybW9yZSwgdGhlIHByaW5jaXBsZWQgc3RydWN0dXJlIG9mIFNjaWxsYSB3aWxsIG1ha2UgYXBwbGljYXRpb25zIGluaGVyZW50bHkgbW9yZSBzZWN1cmUgYW5kIGFtZW5hYmxlIHRvIGZvcm1hbCB2ZXJpZmljYXRpb24uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWmlsbGlxYSAtIHRoZSB1bmRlcmx5aW5nIGJsb2NrY2hhaW4gcGxhdGZvcm0gb24gd2hpY2ggU2NpbGxhIGNvbnRyYWN0cyBhcmUgcnVuLCBoYXMgYmVlbiBkZXNpZ25lZCB0byBiZSBzY2FsYWJsZS4gSXQgZW1wbG95cyB0aGUgaWRlYSBvZiBzaGFyZGluZyB0byB2YWxpZGF0ZSB0cmFuc2FjdGlvbnMgaW4gcGFyYWxsZWwuIFppbGxpcWEgaGFzIGFuIGludHJpbnNpYyB0b2tlbiBuYW1lZCBaaWxsaW5nLCBaSUwgZm9yIHNob3J0IHRoYXQgYXJlIHJlcXVpcmVkIHRvIHJ1biBzbWFydCBjb250cmFjdHMgb24gWmlsbGlxYS4iCiAgICAgICAgKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}